<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Webex</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Webex.styles.css" asp-append-version="true" />
    <script type="text/javascript">
        //Sample application demonstrating how to perform a Webex Teams OAuth2 authentication and Webex Teams API access token request
        //Note: this page must be accessed from a web server, Step #3 below may fail if loaded from the file system

        // Helper function that generates a random alpha/numeric string
        var randomString = function (length) {
            var str = "";
            var range = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < length; i++) {
                str += range.charAt(Math.floor(Math.random() * range.length));
            }
            return str;
        }

        // Helper function that parses a query string into a dictionary object
        var parseQueryStr = function (queryString) {
            var params = {}, keyvals, temp, i, l;
            keyvals = queryString.split("&");  // Split out key/value pairs
            for (i = 0, l = keyvals.length; i < l; i++) {  // Split key/value strings into a dictionary object
                tmp = keyvals[i].split('=');
                params[tmp[0]] = tmp[1];
            }
            return params;
        };

        // Step #1: Fires when the user clicks the 'Request Auth Code' button
        function codeClick() {
            var appClientId = document.getElementById('clientId').value;
            var appRedirectUri = document.getElementById('redirectUri').value;

            // This is not necessary here, just want to save it
            var appClientSecret = document.getElementById('clientSecret').value;
            localStorage.setItem('appClientId', appClientId);
            localStorage.setItem('clientSecret', appClientSecret);

            //Build the request URL.  The base URL and next 4 items are typically always the same for Webex Teams web apps
            var requestUrl = 'https://api.ciscospark.com/v1/authorize?' + //Webex Teams OAuth2 base URL
                'response_type=code&' + // Requesting the OAuth2 'Authentication Code' flow
                'scope=' + encodeURIComponent('spark:rooms_read') + '&' + // Requested permission, i.e. Webex Teams room info
                // The following items are provided by the developer in the source code/config or generated dynamically at run time
                'state=' + encodeURIComponent(randomString(63)) + '&' +	// Random string for OAuth2 nonce replay protection
                'client_id=' + encodeURIComponent(appClientId) + '&' + // The custom app Client ID
                'redirect_uri=' + encodeURIComponent(appRedirectUri); // The custom app's Redirect URI
            window.location = requestUrl; // Redirect the browser to the OAuth2 kickoff URL
        }

        // Step #2: On page load, check if the 'code=' query param is present
        // If so user has already authenticated, and  page has been reloaded via the Redirect URI
        window.onload = function (e) {
            document.getElementById('redirectUri').value = window.location.href.split("?")[0]; // Detect the current page's base URL

            // Write back the values if they are available
            document.getElementById('clientId').value = localStorage.getItem('appClientId');
            document.getElementById('clientSecret').value = localStorage.getItem('clientSecret');

            var params = parseQueryStr(window.location.search.substring(1)); // Parse the query string params into a dictionary
            if (params['code']) { // If the query param 'code' exists, then...
                document.getElementById('code').value = params['code']; // Display the auth code
                document.getElementById('tokenButton').removeAttribute('hidden'); // Reveal the 'Request Access Token' button
            }


            if (params['error']) { // If the query param 'error' exists, then something went wrong...
                alert('Error requesting auth code: ' + params['error'] + ' / ' + params['error_description']);
            }
        }

        // Step #3: Fires when the user clicks the 'Request Access Token' button
        // Takes the auth code and requests an access token
        function tokenClick() {
            var appClientId = document.getElementById('clientId').value;
            var appClientSecret = document.getElementById('clientSecret').value;
            var appRedirectUri = document.getElementById('redirectUri').value;



            xhttp = new XMLHttpRequest(); // Create an AJAX HTTP request object
            xhttp.onreadystatechange = function () {  // Define a handler, which fires when the request completes
                if (xhttp.readyState == 4) { // If the request state = 4 (completed)...
                    if (xhttp.status == 200) { // And the status = 200 (OK), then...
                        var authInfo = JSON.parse(xhttp.responseText); // Parse the JSON response into an object
                        document.getElementById('token').value = authInfo['access_token']; // Retrieve the access_token field, and display it
                        document.getElementById('refresh').value = authInfo['refresh_token']; // Retrieve the refresh_token field, and display it

                        if (document.getElementById('token').value) {
                            document.getElementById('tokenRefReshButton').removeAttribute('hidden'); // Reveal the 'Refresh Access Token' button
                        }

                    } else alert('Error requesting access token: ' + xhttp.statusText)
                }
            }
            xhttp.open('POST', 'https://api.ciscospark.com/v1/access_token', true); // Initialize the HTTP request object for POST to the access token URL
            // Build the HTML form request body
            var body = 'grant_type=authorization_code&' +  // This is an OAuth2 Authorization Code request
                'redirect_uri=' + encodeURIComponent(appRedirectUri) + '&' + // Same custom app Redirect URI
                'code=' + encodeURIComponent(document.getElementById('code').value) + '&' + // User auth code retrieved previously
                'client_id=' + encodeURIComponent(appClientId) + '&' + // The custom app Client ID
                'client_secret=' + encodeURIComponent(appClientSecret); // The custom app Client Secret
            xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); // Sending the content as URL-encoded form data
            xhttp.send(body); // Execute the AJAX HTTP request
        }

        // Step #4: Fires when the user clicks the 'Refresh Access Token' button
        // Takes the auth code and requests an access token
        function tokenRefreshClick() {
            var appClientId = document.getElementById('clientId').value;
            var appClientSecret = document.getElementById('clientSecret').value;
            var appRedirectUri = document.getElementById('redirectUri').value;

            xhttp = new XMLHttpRequest(); // Create an AJAX HTTP request object
            xhttp.onreadystatechange = function () {  // Define a handler, which fires when the request completes
                if (xhttp.readyState == 4) { // If the request state = 4 (completed)...
                    if (xhttp.status == 200) { // And the status = 200 (OK), then...
                        var authInfo = JSON.parse(xhttp.responseText); // Parse the JSON response into an object
                        document.getElementById('token').value = authInfo['access_token']; // Retrieve the access_token field, and display it
                        document.getElementById('refresh').value = authInfo['refresh_token']; // Retrieve the refresh_token field, and display it
                    } else alert('Error requesting access token: ' + xhttp.statusText)
                }
            }
            xhttp.open('POST', 'https://api.ciscospark.com/v1/access_token', true); // Initialize the HTTP request object for POST to the access token URL
            // Build the HTML form request body
            var body = 'grant_type=refresh_token&' +  // This is an OAuth2 Authorization Code request
                'refresh_token=' + encodeURIComponent(document.getElementById('refresh').value) + '&' + // User auth code retrieved previously
                'client_id=' + encodeURIComponent(appClientId) + '&' + // The custom app Client ID
                'client_secret=' + encodeURIComponent(appClientSecret); // The custom app Client Secret
            xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); // Sending the content as URL-encoded form data
            xhttp.send(body); // Execute the AJAX HTTP request
        }
    </script>
    <style type="text/css">
        body {
            font: 14px/1.55 'CiscoSansLight', Arial,'Liberation Sans',FreeSans,sans-serif;
        }

        .glasspane {
            background: #049fd9;
            height: 40px;
            width: 850px;
            display: inline;
            float: left;
        }

            .glasspane h1 {
                opacity: 1;
                color: #fff;
                margin-top: 2px;
                margin-bottom: 0;
                font-weight: normal;
                font-size: 25px;
                padding-left: 10px
            }

        .table {
            margin: 10px 0 0 0;
            float: left;
            background-color: #eee;
            padding: 10px;
        }

        td:first-child {
            width: 116px;
        }

        input, textarea {
            width: 700px;
            display: block;
        }

        textarea {
            height: 140px;
        }

        .wrapper {
            width: 900px;
            float: left;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-page="/Index">Webex</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - Webex - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>